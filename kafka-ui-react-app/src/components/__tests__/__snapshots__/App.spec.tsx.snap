// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App view matches snapshot 1`] = `
.c1 {
  font-size: 14px;
  font-weight: 500;
  height: 32px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.c1 a {
  width: 100%;
  padding: 0.5em 0.75em;
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  margin: 0px 0px;
  background-color: #FFFFFF;
  color: #73848C;
}

.c1 a:hover {
  background-color: #F1F2F3;
  color: #73848C;
}

.c1 a.is-active {
  background-color: #E3E6E8;
  color: #171A1C;
}

.c0 > * {
  padding-bottom: 4px;
}

.c2 {
  padding: 1.5rem 1rem;
  background: #F1F2F3;
  margin-bottom: 0.5rem !important;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  gap: 16px;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}

.c5 {
  background-color: white;
  height: 68px;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  min-width: 150px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  padding: 12px 16px;
  box-shadow: 3px 3px 3px rgba(0,0,0,0.08);
  margin: 0 0 3px 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
}

.c6 {
  font-weight: 500;
  font-size: 12px;
  color: #73848C;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  gap: 10px;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  gap: 2px;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}

.c3 > .c4:first-child {
  border-top-left-radius: 8px;
  border-bottom-left-radius: 8px;
}

.c3 > .c4:last-child {
  border-top-right-radius: 8px;
  border-bottom-right-radius: 8px;
}

.c8 {
  color: #ABB5BA;
  font-size: 14px;
}

.c7 {
  border: none;
  border-radius: 16px;
  height: 20px;
  line-height: 20px;
  background-color: #D6F5E0;
  color: #171A1C;
  font-size: 12px;
  display: inline-block;
  padding-left: 0.75em;
  padding-right: 0.75em;
  text-align: center;
}

.c9 {
  border: none;
  border-radius: 16px;
  height: 20px;
  line-height: 20px;
  background-color: #E3E6E8;
  color: #171A1C;
  font-size: 12px;
  display: inline-block;
  padding-left: 0.75em;
  padding-right: 0.75em;
  text-align: center;
}

.c10 {
  position: relative;
  display: inline-block;
  width: 34px;
  height: 20px;
  margin-right: 8px;
}

.c13 {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ABB5BA;
  -webkit-transition: 0.4s;
  transition: 0.4s;
  border-radius: 20px;
}

.c13::before {
  position: absolute;
  content: '';
  height: 14px;
  width: 14px;
  left: 3px;
  bottom: 3px;
  background-color: white;
  -webkit-transition: 0.4s;
  transition: 0.4s;
  border-radius: 50%;
}

.c11 {
  opacity: 0;
  width: 0;
  height: 0;
}

.c11:checked + .c12 {
  background-color: #29A352;
}

.c11:focus + .c12 {
  box-shadow: 0 0 1px #29A352;
}

.c11:checked + .c12:before {
  -webkit-transform: translateX(14px);
  -ms-transform: translateX(14px);
  transform: translateX(14px);
}

@media screen and (max-width:1023px) {
  .c3 > .c4:first-child,
  .c3 > .c4:last-child {
    border-radius: 0;
  }
}

<Provider
  store={
    Object {
      "@@observable": [Function],
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <StaticRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      staticContext={Object {}}
    >
      <App
        alerts={Array []}
        clusters={Array []}
        fetchClustersList={
          [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        isClusterListFetched={true}
      >
        <Component
          theme={
            Object {
              "buttonStyles": Object {
                "fontSize": Object {
                  "L": "16px",
                  "M": "14px",
                  "S": "14px",
                },
                "height": Object {
                  "L": "40px",
                  "M": "32px",
                  "S": "24px",
                },
                "primary": Object {
                  "backgroundColor": Object {
                    "active": "#1414B8",
                    "hover": "#1717CF",
                    "normal": "#4F4FFF",
                  },
                  "color": "#FFFFFF",
                  "invertedColors": Object {
                    "active": "#1414B8",
                    "hover": "#1717CF",
                    "normal": "#4F4FFF",
                  },
                },
                "secondary": Object {
                  "backgroundColor": Object {
                    "active": "#D5DADD",
                    "hover": "#E3E6E8",
                    "normal": "#F1F2F3",
                  },
                  "color": "#171A1C",
                  "invertedColors": Object {
                    "active": "#171A1C",
                    "hover": "#454F54",
                    "normal": "#73848C",
                  },
                },
              },
              "layout": Object {
                "minWidth": "1200px",
                "navBarHeight": "3.25rem",
                "navBarWidth": "201px",
              },
              "menuStyles": Object {
                "backgroundColor": Object {
                  "active": "#E3E6E8",
                  "hover": "#F1F2F3",
                  "normal": "#FFFFFF",
                },
                "color": Object {
                  "active": "#171A1C",
                  "hover": "#73848C",
                  "normal": "#73848C",
                },
              },
              "paginationStyles": Object {
                "borderColor": Object {
                  "active": "#454F54",
                  "disabled": "#C7CED1",
                  "hover": "#73848C",
                  "normal": "#ABB5BA",
                },
                "color": Object {
                  "active": "#171A1C",
                  "disabled": "#C7CED1",
                  "hover": "#171A1C",
                  "normal": "#171A1C",
                },
              },
              "primaryTabStyles": Object {
                "borderColor": Object {
                  "active": "#4F4FFF",
                  "hover": "transparent",
                  "normal": "transparent",
                },
                "color": Object {
                  "active": "#171A1C",
                  "hover": "#171A1C",
                  "normal": "#73848C",
                },
              },
              "secondaryTabStyles": Object {
                "backgroundColor": Object {
                  "active": "#E3E6E8",
                  "hover": "#F1F2F3",
                  "normal": "#FFFFFF",
                },
                "color": Object {
                  "active": "#171A1C",
                  "hover": "#171A1C",
                  "normal": "#73848C",
                },
              },
              "selectStyles": Object {
                "borderColor": Object {
                  "active": "#454F54",
                  "disabled": "#E3E6E8",
                  "hover": "#73848C",
                  "normal": "#ABB5BA",
                },
                "color": Object {
                  "active": "#171A1C",
                  "disabled": "#ABB5BA",
                  "hover": "#171A1C",
                  "normal": "#171A1C",
                },
              },
              "switch": Object {
                "checked": "#29A352",
                "unchecked": "#ABB5BA",
              },
              "tagStyles": Object {
                "backgroundColor": Object {
                  "gray": "#E3E6E8",
                  "green": "#D6F5E0",
                  "yellow": "#FFEECC",
                },
                "color": "#171A1C",
              },
              "thStyles": Object {
                "backgroundColor": Object {
                  "normal": "#FFFFFF",
                },
                "color": Object {
                  "normal": "#73848C",
                },
                "previewColor": Object {
                  "normal": "#4F4FFF",
                },
              },
            }
          }
        >
          <div
            className="Layout"
          >
            <nav
              aria-label="main navigation"
              className="navbar is-fixed-top is-white Layout__header"
              role="navigation"
            >
              <div
                className="navbar-brand"
              >
                <div
                  className="navbar-burger ml-0"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <span />
                  <span />
                  <span />
                </div>
                <a
                  className="navbar-item title is-5 is-marginless"
                  href="/ui"
                >
                  UI for Apache Kafka
                </a>
                <div
                  className="navbar-item"
                >
                  <Version />
                </div>
              </div>
            </nav>
            <main
              className="Layout__container"
            >
              <div
                className="Layout__sidebar has-shadow has-background-white"
              >
                <Styled(Nav)
                  clusters={Array []}
                  isClusterListFetched={true}
                >
                  <Nav
                    className="c0"
                    clusters={Array []}
                    isClusterListFetched={true}
                  >
                    <aside
                      className="has-shadow has-background-white c0"
                    >
                      <ul>
                        <ClusterMenuItem
                          activeClassName="is-active"
                          exact={true}
                          isTopLevel={true}
                          title="Dashboard"
                          to="/ui"
                        >
                          <StyledMenuItem
                            isTopLevel={true}
                            to="/ui"
                          >
                            <li
                              className="c1"
                              to="/ui"
                            >
                              <NavLink
                                activeClassName="is-active"
                                exact={true}
                                title="Dashboard"
                                to="/ui"
                              >
                                <Link
                                  aria-current={null}
                                  title="Dashboard"
                                  to={
                                    Object {
                                      "hash": "",
                                      "pathname": "/ui",
                                      "search": "",
                                      "state": null,
                                    }
                                  }
                                >
                                  <LinkAnchor
                                    aria-current={null}
                                    href="/ui"
                                    navigate={[Function]}
                                    title="Dashboard"
                                  >
                                    <a
                                      aria-current={null}
                                      href="/ui"
                                      onClick={[Function]}
                                      title="Dashboard"
                                    >
                                      Dashboard
                                    </a>
                                  </LinkAnchor>
                                </Link>
                              </NavLink>
                            </li>
                          </StyledMenuItem>
                        </ClusterMenuItem>
                      </ul>
                    </aside>
                  </Nav>
                </Styled(Nav)>
              </div>
              <div
                aria-hidden="true"
                className="Layout__sidebarOverlay is-overlay"
                onClick={[Function]}
                onKeyDown={[Function]}
                tabIndex={-1}
              />
              <Breadcrumb />
              <Switch>
                <Route
                  component={[Function]}
                  computedMatch={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  exact={true}
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  path={
                    Array [
                      "/",
                      "/ui",
                      "/ui/clusters",
                    ]
                  }
                >
                  <Dashboard
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "createHref": [Function],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    staticContext={Object {}}
                  >
                    <div>
                      <Connect(ClustersWidget)>
                        <ClustersWidget
                          clusters={Array []}
                          dispatch={[Function]}
                          offlineClusters={Array []}
                          onlineClusters={Array []}
                        >
                          <styled.div>
                            <div
                              className="c2"
                            >
                              <MetricsSection>
                                <div>
                                  <styled.div>
                                    <div
                                      className="c3"
                                    >
                                      <Indicator
                                        label={
                                          <Styled(Tag)
                                            color="green"
                                          >
                                            Online
                                          </Styled(Tag)>
                                        }
                                      >
                                        <styled.div>
                                          <div
                                            className="c4 c5"
                                          >
                                            <div>
                                              <styled.div>
                                                <div
                                                  className="c6"
                                                >
                                                  <Styled(Tag)
                                                    color="green"
                                                  >
                                                    <Tag
                                                      className="c7"
                                                      color="green"
                                                    >
                                                      <p
                                                        className="c7"
                                                      >
                                                        Online
                                                      </p>
                                                    </Tag>
                                                  </Styled(Tag)>
                                                   
                                                </div>
                                              </styled.div>
                                              <span>
                                                <span
                                                  data-testid="onlineCount"
                                                >
                                                  0
                                                </span>
                                                 
                                                <styled.span>
                                                  <span
                                                    className="c8"
                                                  >
                                                    clusters
                                                  </span>
                                                </styled.span>
                                              </span>
                                            </div>
                                          </div>
                                        </styled.div>
                                      </Indicator>
                                      <Indicator
                                        label={
                                          <Styled(Tag)
                                            color="gray"
                                          >
                                            Offline
                                          </Styled(Tag)>
                                        }
                                      >
                                        <styled.div>
                                          <div
                                            className="c4 c5"
                                          >
                                            <div>
                                              <styled.div>
                                                <div
                                                  className="c6"
                                                >
                                                  <Styled(Tag)
                                                    color="gray"
                                                  >
                                                    <Tag
                                                      className="c9"
                                                      color="gray"
                                                    >
                                                      <p
                                                        className="c9"
                                                      >
                                                        Offline
                                                      </p>
                                                    </Tag>
                                                  </Styled(Tag)>
                                                   
                                                </div>
                                              </styled.div>
                                              <span>
                                                <span
                                                  data-testid="offlineCount"
                                                >
                                                  0
                                                </span>
                                                 
                                                <styled.span>
                                                  <span
                                                    className="c8"
                                                  >
                                                    clusters
                                                  </span>
                                                </styled.span>
                                              </span>
                                            </div>
                                          </div>
                                        </styled.div>
                                      </Indicator>
                                    </div>
                                  </styled.div>
                                </div>
                              </MetricsSection>
                            </div>
                          </styled.div>
                          <div
                            className="p-4"
                          >
                            <Switch
                              checked={false}
                              name="switchRoundedDefault"
                              onChange={[Function]}
                            >
                              <styled.label>
                                <label
                                  className="c10"
                                >
                                  <styled.input
                                    checked={false}
                                    name="switchRoundedDefault"
                                    onChange={[Function]}
                                    type="checkbox"
                                  >
                                    <input
                                      checked={false}
                                      className="c11"
                                      name="switchRoundedDefault"
                                      onChange={[Function]}
                                      type="checkbox"
                                    />
                                  </styled.input>
                                  <styled.span>
                                    <span
                                      className="c12 c13"
                                    />
                                  </styled.span>
                                </label>
                              </styled.label>
                            </Switch>
                            <span>
                              Only offline clusters
                            </span>
                          </div>
                        </ClustersWidget>
                      </Connect(ClustersWidget)>
                    </div>
                  </Dashboard>
                </Route>
              </Switch>
            </main>
            <div
              className="Layout__alerts"
            />
          </div>
        </Component>
      </App>
    </Router>
  </StaticRouter>
</Provider>
`;
